---
metadata:
  filename: "recon-windows-initial.yaml"
  tags: ["windows", "domain"]
  created: "2025-03-29"
  author: "Unknown"

content: |
  $commandsAndPurposes = New-Object 'system.collections.generic.dictionary[string,string]';

  $username = & whoami | ForEach-Object { $_ -split '\\' } | Select-Object -Last 1;

  $PSReadlineHistorySavePath = (Get-PSReadlineOption).HistorySavePath;

  $commandsAndPurposes.Add("System Information", "systeminfo");
  $commandsAndPurposes.Add("Hostname", "hostname");
  $commandsAndPurposes.Add("Username", "whoami");
  $commandsAndPurposes.Add("Group Memberships (whoami)", "whoami /groups");
  $commandsAndPurposes.Add("Group Memberships (net user)", "net user $username");
  $commandsAndPurposes.Add("Local Users", "Get-LocalUser");
  $commandsAndPurposes.Add("Local Groups", "Get-LocalGroup");
  $commandsAndPurposes.Add("Installed 32-bit applications", "Get-ItemProperty 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*' | select displayname");
  $commandsAndPurposes.Add("Installed 64-bit applications", "Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*' | select displayname");
  $commandsAndPurposes.Add("Network Interfaces", "ipconfig /all");
  $commandsAndPurposes.Add("Routes", "route print");
  $commandsAndPurposes.Add("Currently Active Connections", "netstat -ano");
  $commandsAndPurposes.Add("Common User Files", "<%=$(esh payloads/recon-windows-common-user-files)%>");
  $commandsAndPurposes.Add("User PSReadline History", "type $PSReadlineHistorySavePath");

  # Adding the command for running processes as a script block
  $processCommandScriptBlock = {
      Get-Process | ForEach-Object {
          try {
              $processPath = $_.MainModule.FileName
          } catch {
              $processPath = 'Access Denied'
          }
          [PSCustomObject]@{
              ProcessName = $_.ProcessName
              ID = $_.Id
              Path = $processPath
          }
      }
  }
  $commandsAndPurposes.Add("Running Processes", $processCommandScriptBlock);

  If(Test-Path report.txt) {
      Remove-Item -Path report.txt
  }

  foreach ($purpose in $commandsAndPurposes.Keys) {
      $command = $commandsAndPurposes[$purpose];

      echo "==========================================" >> report.txt;
      echo "Trying to enum for $purpose" >> report.txt;

      if ($command -is [scriptblock]) {
          # Execute script block directly
          & $command >> report.txt
      } else {
          # Execute command as string
          Invoke-Expression $command >> report.txt;
      }

      sleep 1;
  }

  echo "Done enumerating! Check report.txt"
